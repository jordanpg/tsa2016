<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>Spr_BK_Dwn</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>Obj_Damaged_Base</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///create event
name = "Generic AI";

image_speed = 0;

phy_fixed_rotation = true;

debugMaps = false;
debugPaths = false;
nxtPt = -1;

path = path_add();
lastx = -1;
lasty = -1;
chasing = noone;

spd = 20;

pathTimeout = 100;
diffTolerance = 16;
lastPath = -1;
minSegmentLen = 0.5;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialize combat variables
maxHealth = 500;
baseAtk = 0.2;
baseDef = 1;

event_inherited();
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>601</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_execute_script</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>9</kind>
            <script>initOwnMap</script>
          </argument>
          <argument>
            <kind>0</kind>
            <string></string>
          </argument>
          <argument>
            <kind>0</kind>
            <string></string>
          </argument>
          <argument>
            <kind>0</kind>
            <string></string>
          </argument>
          <argument>
            <kind>0</kind>
            <string></string>
          </argument>
          <argument>
            <kind>0</kind>
            <string></string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Exit if game is paused

if(global.pause)
    exit;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Run pre-step AI (check if dead, pathfinding)
if(hp &lt;= 0)
{
    //dead
    dead = true;
    
    image_blend = c_red;
    
    if(path_exists(path))
    {
        path_end();
        path_delete(path);
    }
    
    exit;
}

if(instance_exists(chasing))
{
    event_user(0);

    /*
    if(current_time - lastPath &gt;= pathTimeout)
        event_user(0);
    else if(path_exists(path))
    {
        var ex = path_get_x(path, 1);
        var ey = path_get_y(path, 1);
        var cx = chasing.x;
        var cy = chasing.y;
        
        var dist = point_distance(ex, ey, cx, cy);
        if(dist &gt;= diffTolerance)
            event_user(0);
        else
        {
            var ex = path_get_x(path, 0);
            var ey = path_get_y(path, 0);
            var dist = point_distance(ex, ey, phy_position_x, phy_position_y);
            
            if(dist &gt;= diffTolerance)
                event_user(0);
        }
    }
    */
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Exit if game is paused

if(global.pause)
    exit;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>601</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_execute_script</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>9</kind>
            <script>depthCorrect</script>
          </argument>
          <argument>
            <kind>0</kind>
            <string></string>
          </argument>
          <argument>
            <kind>0</kind>
            <string></string>
          </argument>
          <argument>
            <kind>0</kind>
            <string></string>
          </argument>
          <argument>
            <kind>0</kind>
            <string></string>
          </argument>
          <argument>
            <kind>0</kind>
            <string></string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Move along path (chase AI)
//var dt = delta_time / 1000000;

image_speed = 0;

if(!path_exists(path) &amp;&amp; instance_exists(chasing))
    exit;

if(path_get_length(path) &lt;= 0)
    exit;
    
var px = path_get_point_x(path, 1);
var py = path_get_point_y(path, 1);

var dir = point_direction(phy_position_x, phy_position_y, px, py);

var vx = lengthdir_x(spd, dir);
var vy = lengthdir_y(spd, dir);

physics_apply_local_force(phy_position_x, phy_position_y, vx, vy);
    
image_speed = .18 * (spd / 50);

/*
var pts = path_get_number(path);
if(pts &lt;= 0)
    exit;
    
var prog = pts * path_position;
if(prog &lt; 0)
    prog = 0;

show_debug_message("prog " + string(prog));
    
var curr = floor(prog);
var next = curr + 1;

nxtPt = next;

show_debug_message(string(curr) + " " + string(next));
if(next &gt; pts)
{
    //add more here later probably
    exit;
}
var nx = path_get_point_x(path, next);
var ny = path_get_point_y(path, next);

var cx = path_get_x(path, path_position);
var cy = path_get_y(path, path_position);

show_debug_message("next " + string(nx) + " " + string(ny));

var dx = nx - cx;
var dy = ny - cy;

show_debug_message("diff " + string(dx) + " " + string(dy));

var len = sqrt(sqr(dx) + sqr(dy));

var vx = dx / len;
var vy = dy / len;

//phy_position_x += vx * spd// * dt;
//phy_position_y += vy * spd// * dt;

physics_apply_local_force(0, 0, vx * spd, vy * spd);

show_debug_message("force " + string(vx * spd) + " " + string(vy * spd));
*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="Obj_Damaged_Base">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Collide with damaged objects</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="Obj_col">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Collide with basic colliders</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Move toward player</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Create path to target
if(!instance_exists(chasing))
    exit;

//if(chasing.x == lastx &amp;&amp; chasing.y == lasty)
//    exit;

path_end();
path_clear_points(path);

mp_grid_path(GameState.pathingMaps[? getMapName()], path, phy_position_x, phy_position_y, chasing.x, chasing.y, true);
lastx = chasing.x;
lasty = chasing.y;

path_start(path, 0, path_action_stop, true);

lastPath = current_time;

//show_debug_message("new path " + string(path_get_length(path)));
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="73">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///debug drawing
if(debugMaps)
{
    draw_set_alpha(0.2);
    mp_grid_draw(GameState.pathingMaps[? sprite_index]);
    draw_set_alpha(1);
}

if(debugPaths &amp;&amp; path_exists(path))
{
    draw_set_color(c_red);
    draw_path(path, x, y, false);
    draw_circle(path_get_x(path, 0), path_get_y(path, 0), 16, 1);
    draw_set_color(c_blue);
    draw_circle(path_get_x(path, 1), path_get_y(path, 1), 16, 1);
    
    draw_set_alpha(0.5);
    draw_set_color(c_purple);
    draw_circle(path_get_x(path, path_position), path_get_y(path, path_position), 2, 0);
    
    if(nxtPt != -1)
    {
        draw_set_color(c_white);
        draw_circle(path_get_point_x(path, nxtPt), path_get_point_y(path, nxtPt), 2, 0);
    }
    draw_set_alpha(1);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>-1</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>1</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>5</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>16,26</point>
    <point>6,16</point>
  </PhysicsShapePoints>
</object>
